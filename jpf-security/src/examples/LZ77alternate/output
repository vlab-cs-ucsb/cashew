Running Symbolic PathFinder ...
symbolic.dp=choco
symbolic.string_dp_timeout_ms=0
symbolic.string_dp=z3str2
symbolic.choco_time_bound=30000
symbolic.max_pc_length=2147483647
symbolic.max_pc_msec=0
symbolic.min_int=-2147483648
symbolic.min_long=-9223372036854775808
symbolic.min_short=-32768
symbolic.min_byte=-128
symbolic.min_char=97
symbolic.max_int=2147483647
symbolic.max_long=9223372036854775807
symbolic.max_short=32767
symbolic.max_byte=127
symbolic.max_char=122
symbolic.min_double=4.9E-324
symbolic.max_double=1.7976931348623157E308
New sym int in_1_SYMSTRING.length min=-2147483648, max=2147483647
New sym int Length_0_ min=0, max=30
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 1
CONST_0 < Length_0_ -> true

### PCs: total:1 sat:1 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 1
CONST_0 >= Length_0_ -> true

### PCs: total:2 sat:2 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 1
CONST_0 >= Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_0)_1_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 2
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:3 sat:3 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 2
CONST_1 >= Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:4 sat:4 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 2
CONST_1 >= Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_1)_2_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 3
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:5 sat:5 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 3
CONST_2 >= Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:6 sat:6 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 3
CONST_2 >= Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_2)_3_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 4
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:7 sat:7 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 4
CONST_3 >= Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:8 sat:8 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 4
CONST_3 >= Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_3)_4_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 5
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:9 sat:9 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 5
CONST_4 >= Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:10 sat:10 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 5
CONST_4 >= Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_4)_5_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 6
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:11 sat:11 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 6
CONST_5 >= Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:12 sat:12 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 6
CONST_5 >= Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_5)_6_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 7
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:13 sat:13 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 7
CONST_6 >= Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:14 sat:14 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 7
CONST_6 >= Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_6)_7_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 8
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:15 sat:15 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 8
CONST_7 >= Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:16 sat:16 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 8
CONST_7 >= Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_7)_8_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 9
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:17 sat:17 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 9
CONST_8 >= Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:18 sat:18 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 9
CONST_8 >= Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_8)_9_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 10
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:19 sat:19 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 10
CONST_9 >= Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:20 sat:20 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 10
CONST_9 >= Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_9)_10_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 11
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:21 sat:21 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 11
CONST_10 >= Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:22 sat:22 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 11
CONST_10 >= Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_10)_11_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 12
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:23 sat:23 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 12
CONST_11 >= Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:24 sat:24 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 12
CONST_11 >= Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_11)_12_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 13
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:25 sat:25 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 13
CONST_12 >= Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:26 sat:26 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 13
CONST_12 >= Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_12)_13_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 14
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:27 sat:27 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 14
CONST_13 >= Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:28 sat:28 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 14
CONST_13 >= Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_13)_14_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 15
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:29 sat:29 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 15
CONST_14 >= Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:30 sat:30 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 15
CONST_14 >= Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_14)_15_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 16
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:31 sat:31 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 16
CONST_15 >= Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:32 sat:32 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 16
CONST_15 >= Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_15)_16_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 17
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:33 sat:33 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 17
CONST_16 >= Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:34 sat:34 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 17
CONST_16 >= Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_16)_17_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 18
CONST_17 < Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:35 sat:35 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 18
CONST_17 >= Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:36 sat:36 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 18
CONST_17 >= Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_17)_18_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 19
CONST_18 < Length_0_ &&
CONST_17 < Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:37 sat:37 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 18 (Length in_1)))
(assert (< 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 19
CONST_18 >= Length_0_ &&
CONST_17 < Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:38 sat:38 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 18 (Length in_1)))
(assert (< 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

Using String Version
~0~0
numeric PC: constraint # = 19
CONST_18 >= Length_0_ &&
CONST_17 < Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 18 (Length in_1)))
(assert (< 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

New sym int CharAt(CONST_18)_19_ min=0, max=65535
Symbolic string analysis!!!invokevirtual java.lang.String.charAt(I)C
Symbolic string analysis!!!invokevirtual java.lang.String.length()I
numeric PC: constraint # = 20
CONST_19 < Length_0_ &&
CONST_18 < Length_0_ &&
CONST_17 < Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:39 sat:39 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (< 19 (Length in_1)))
(assert (< 18 (Length in_1)))
(assert (< 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

numeric PC: constraint # = 20
CONST_19 >= Length_0_ &&
CONST_18 < Length_0_ &&
CONST_17 < Length_0_ &&
CONST_16 < Length_0_ &&
CONST_15 < Length_0_ &&
CONST_14 < Length_0_ &&
CONST_13 < Length_0_ &&
CONST_12 < Length_0_ &&
CONST_11 < Length_0_ &&
CONST_10 < Length_0_ &&
CONST_9 < Length_0_ &&
CONST_8 < Length_0_ &&
CONST_7 < Length_0_ &&
CONST_6 < Length_0_ &&
CONST_5 < Length_0_ &&
CONST_4 < Length_0_ &&
CONST_3 < Length_0_ &&
CONST_2 < Length_0_ &&
CONST_1 < Length_0_ &&
CONST_0 < Length_0_ -> true

### PCs: total:40 sat:40 unsat:0

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Calling Z3str2

Z3str2 translation:
(declare-variable in_1 String)

(assert (>= 19 (Length in_1)))
(assert (< 18 (Length in_1)))
(assert (< 17 (Length in_1)))
(assert (< 16 (Length in_1)))
(assert (< 15 (Length in_1)))
(assert (< 14 (Length in_1)))
(assert (< 13 (Length in_1)))
(assert (< 12 (Length in_1)))
(assert (< 11 (Length in_1)))
(assert (< 10 (Length in_1)))
(assert (< 9 (Length in_1)))
(assert (< 8 (Length in_1)))
(assert (< 7 (Length in_1)))
(assert (< 6 (Length in_1)))
(assert (< 5 (Length in_1)))
(assert (< 4 (Length in_1)))
(assert (< 3 (Length in_1)))
(assert (< 2 (Length in_1)))
(assert (< 1 (Length in_1)))
(assert (< 0 (Length in_1)))
(check-sat)
(get-model)

